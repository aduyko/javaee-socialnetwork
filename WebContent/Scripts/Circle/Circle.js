/**
 * JS for Circle.jsp, circle module
 * 
 * @author James C. Porcelli
 */

/**
 * When the page finishes loading in the browser
 */
function circleDOM_onReady() {

	// Attach listener to button to submit a new Post
	var submitPostBtn = document.getElementById('PostSubmitBtn');
	submitPostBtn.addEventListener('click', makePost);

	// Attach listener to link to comment on a post
	var posts = document.getElementsByClassName('PostComment');
	// Add listener to each post in DOM
	for ( var i = 0; i < posts.length; i++) {
		posts[i].addEventListener('click', function(e) {
			var nearestCommentInput = $(e.target).closest('.PostDiv').find(
					'.PostDivComments').find('.WriteCommentDiv').find(
					'.WriteComment');
			nearestCommentInput.focus();
		});
	}

	// Attach listener for submit of input in comment text box
	$('.WriteComment').keypress(function(e) {
		// Return key code
		var ENTER = 13;

		if (e.which == ENTER) {
			//addCircleMember(e);
			makeComment(e);
		}
	});

	// Attach listener to link to like a post
	var likePost = document.getElementsByClassName('LikePost');
	// Add listener to each link to like a post in the DOM
	for ( var i = 0; i < likePost.length; i++) {

		var likeStatus = likePost[i].getAttribute('data-likeStatus');

		// If the element had likeStatus attribute like then use like a post
		// event handler, else unlike a post
		if (likeStatus === 'Like') {
			console.log('Log: Adding listener to post like');
			likePost[i].addEventListener('click', like_Post);
		} else {
			likePost[i].addEventListener('click', unlike_Post);
		}
	}

	// Attach listener to link to like a comment
	var likeComment = document.getElementsByClassName('LikeComment');
	// Add listener to each link to like a comment in the DOM
	for ( var i = 0; i < likeComment.length; i++) {

		var likeStatus = likeComment[i].getAttribute('data-likeStatus');

		if (likeStatus === 'Like') {
			console.log('Log: Adding listener to comment like');
			likeComment[i].addEventListener('click', like_Comment);
		} else {
			likeComment[i].addEventListener('click', unlike_Comment);
		}

	}

	// Cache of add circle member user searches for this browser session
	var cache = {};

	// Auto complete for add circle member input field
	$('#AddCircleMember')
			.autocomplete(
					{
						source : function(request, response) {
							if (request.term in cache) {
								response($.map(cache[request.term], function(
										item, key) {
									return {
										label : item.firstName + ", "
												+ item.lastName,
										value : item.firstName + ", "
												+ item.lastName
									};
								}))
								return;
							}
							$
									.ajax({
										type : 'GET',
										url : '/cse-305/CircleServlet?action=CircleAddMemberAutoComplete&term='
												+ request.term,
										success : function(data) {
											cache[request.term] = data;
											response($.map(data, function(item,
													key) {
												return {
													label : item.firstName
															+ ", "
															+ item.lastName,
													value : item.firstName
															+ ", "
															+ item.lastName
												};
											}));
										}
									});
						},
						minLength : 2,
						select : function(event, ui) {
							console.log(event);
							// Do something with the selection if it isnt empty
						}
					});
}

/**
 * Like a post;
 * 
 * @param e
 *            The event generated by liking a post.
 */
function like_Post(e) {
	// The target post element
	var post = e.target;

	console.log('Log: like post');

	// The elements data attributes
	var postId = post.getAttribute('data-postId');
	var userId = post.getAttribute('data-userId');

	$.ajax({
		type : 'POST',
		url : '/cse-305/CircleServlet?action=likePost',
		data : {
			'postId' : postId,
			'userId' : userId,
		},
		success : function(data) {

			// Change the target post like option to unlike for the current user
			e.target.innerText = "Unlike";
			var postDiv = $(e.target).closest('.PostDiv');
			var postLikes = postDiv.find('.PostLikes');
			var likesCountSpan = postLikes.find('.PeoplePostLikeList')[0];
			var likesCount = parseInt(likesCountSpan.innerText.trim());

			// Increment the like count
			likesCount++;
			likesCountSpan.innerText = likesCount;

		},
		error : function(data, textStatus, jqXHR) {
			// Should notify the user of the error somehow
			console.log('Log:' + textStatus);
		}
	});
}

/**
 * 
 * @param e
 */
function unlike_Post(e) {

}

/**
 * Like a comment.
 * 
 * @param e
 */
function like_Comment(e) {
	var comment = e.target;

	console.log('Log: like post');

	var commentId = comment.getAttribute('data-commentId');
	var userId = comment.getAttribute('data-userId');

	$.ajax({
		type : 'POST',
		url : '/cse-305/CircleServlet?action=likeComment',
		data : {
			'commentId' : commentId,
			'userId' : userId,
		},
		success : function(data) {
			e.target.innerText = "Unlike";
			var commentDiv = $(e.target).closest('.CommentDiv');
			var likesCountSpan = commentDiv.find('.PeopleCommentLikeList')[0];
			var likesCount = parseInt(likesCountSpan.innerText.trim());

			// Increment the like count
			likesCount++;
			likesCountSpan.innerText = likesCount;
			
		},
		error : function(data, textStatus, jqXHR) {
			alert(textStatus);
		}
	});
}

/**
 * 
 * @param e
 */
function unlike_Comment(e) {

}

/**
 * Make a new post.
 * 
 * @param e
 *            The event generated by making a new post on a given circle.
 */
function makePost(e) {
	console.log('Log: Making new post');

	// The target post field information
	var postTextArea = document.getElementById('UserPost');
	var postText = postTextArea.value;

	// The data attributes attached to the element
	var postSubmitDiv = document.getElementById('PostSubmitDiv');
	var circleId = postSubmitDiv.getAttribute('data-circleId');
	var authorId = postSubmitDiv.getAttribute('data-curUserId');
	var authorName = postSubmitDiv.getAttribute('data-authorName');

	if (postText != "") {
		$
				.ajax({
					type : 'POST',
					url : '/cse-305/CircleServlet?action=makePost',
					data : {
						'content' : postText,
						'circleId' : circleId,
						'authorId' : authorId
					},
					success : function(data) {

						console.log('Log: new Post success');

						var newComment = '<li>\
								<div class="PostDiv">\
									<a href="#?action=ViewUser&Uid='
								+ authorId
								+ '" style="display: block; color: #00a; font-weight: bold;">'
								+ authorName
								+ '</a>\
									<p style="display: block;">'
								+ postText
								+ '</p>\
									<div class="PostDivOptions">\
										<span class="LikePost" data-postId="'
								+ data.postId
								+ '" data-userId="'
								+ authorId
								+ '">Like</span>\
										<span class="PostComment">Comment</span>\
									</div>\
									<div class="PostLikes">\
										<span><i class="glyphicon glyphicon-thumbs-up"></i> <span class="PeoplePostLikeList">0 people</span><span> like this</span></span>\
									</div>\
									<div class="PostDivComments">\
										<ul class="CommentList">\
										</ul>\
										<div class="WriteCommentDiv">\
											<input type="text" placeholder="write a comment.." class="WriteComment" data-postId="'
								+ data.postId
								+ '" data-userId="'
								+ authorId
								+ '" data-userName="'
								+ authorName
								+ '" />\
										</div>\
									</div>\
								</div>\
								<hr style="color: #dedede; width: 517px; margin-left: -40px;" />\
							</li>';

						var newCommentHtml = $(newComment);

						// Attach listener for liking this new post
						newCommentHtml.find('.LikePost')[0].addEventListener(
								'click', like_Post);

						// Attach listener for clicking on the comment link on
						// this new post
						newCommentHtml.find('.PostComment')[0]
								.addEventListener('click', function(e) {
									var nearestCommentInput = $(e.target)
											.closest('.PostDiv').find(
													'.PostDivComments').find(
													'.WriteCommentDiv').find(
													'.WriteComment');

									nearestCommentInput.focus();
								});

						// Comment input for this post
						var nearestCommentInput = newCommentHtml
								.find('.WriteComment');

						// Attach keypress listener to listen for return in the
						// comment input for this new post
						nearestCommentInput.keypress(function(e) {
							// Return key code
							var ENTER = 13;

							if (e.which == ENTER) {
								makeComment(e);
							}
						});

						// Prepend the new post structure to the post list
						$('#Post_List').prepend(newCommentHtml);

						// Clear the post input field
						var postTextArea = document.getElementById('UserPost');
						postTextArea.value = "";

					},
					error : function(data, textStatus, jqXHR) {
						// Should notify user of the error somehow
						console.log('Log:Error:' + textStatus);
					}
				});

	} else {
		// Text area empty
		Console.log('Log: Post body empty');
		return;
	}

}

/**
 * Comment on a post.
 * 
 * @param e
 *            The event generated by submitting the comment in the input field
 *            for the target post
 */
function makeComment(e) {
	// The target input field information
	var commentInput = e.target;
	var comment = commentInput.value;

	// The data attributes attached to the element
	var postId = commentInput.getAttribute('data-postId');
	var authorId = commentInput.getAttribute('data-userId');
	var authorName = commentInput.getAttribute('data-userName');

	if (comment != "") {
		console.log('Log: Comment content = ' + comment);

		$
				.ajax({
					type : 'POST',
					url : '/cse-305/CircleServlet?action=makeComment',
					data : {
						'content' : comment,
						'postId' : postId,
						'authorId' : authorId
					},
					success : function(data) {
						console.log('Log: New commment success');

						var newComment = '<li>\
								<div class="CommentDiv">\
									<span style="font-size: small; color: #00a; font-weight: bold;">'
								+ authorName
								+ '</span>\
									<div>\
										<span>'
								+ comment
								+ '</span>\
									</div>\
									<span style="color: #aeaeae; font-size: small; margin-right: 3px;">'
								+ data.dateString
								+ '</span>\
									<span class="LikeComment" data-commentId="'
								+ data.commentId
								+ '" data-userId="'
								+ authorId
								+ '"> Like</span>\
									<span><i class="glyphicon glyphicon-thumbs-up"></i><span class="PeopleCommentLikeList"> 0 </span></span>\
								</div>\
							</li>';

						var newCommentHtml = $(newComment);

						// Attach event handler for liking this new comment
						newCommentHtml.find('.LikeComment')[0]
								.addEventListener('click', like_Comment);

						// Clear the input field
						commentInput.value = "";

						// Append the new comment structure to the comment list
						// for the target post
						var commentList = $(e.target).closest(
								'.PostDivComments').find('.CommentList');

						commentList.append(newCommentHtml);
					},
					error : function(data, textStatus, jqXHR) {
						// Should notify user of the error somehow
						console.log('Log:Error:' + textStatus);
					}
				});
	} else {
		console.log('Log: Comment body empty.');
		return;
	}

}

// DOM ready
$(document).ready(circleDOM_onReady);